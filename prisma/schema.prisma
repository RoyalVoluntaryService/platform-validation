generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  apiKeyId       String       @id
  hashedApiKey   String       @unique
  permissions    Permission[]
  organisationId String
  state          RecordState  @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Organisation   Organisation @relation(fields: [organisationId], references: [organisationId])
}

model AvailabilityType {
  availabilityTypeId    String                  @id
  availabilityTypeName  String                  @unique @db.VarChar(100)
  state                 RecordState             @default(ACTIVE)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  VolunteerAvailability VolunteerAvailability[]
}

model Cause {
  causeId     String        @id
  causeName   String        @unique @db.VarChar(100)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Opportunity Opportunity[]
  Volunteer   Volunteer[]
}

model Opportunity {
  opportunityId             String                      @id
  opportunityType           OpportunityType
  commitment                OpportunityCommitment
  title                     String                      @db.VarChar(255)
  description               String
  postcode                  String                      @db.VarChar(255)
  startDate                 DateTime
  endDate                   DateTime?
  status                    RecordState
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  organisationId            String
  Organisation              Organisation                @relation(fields: [organisationId], references: [organisationId])
  OpportunityInstance       OpportunityInstance[]
  VolunteerSavedOpportunity VolunteerSavedOpportunity[]
  Cause                     Cause[]
  Skill                     Skill[]
}

model OpportunityInstance {
  opportunityInstanceId     String                      @id
  instanceDate              DateTime
  instanceStart             DateTime
  instanceEnd               DateTime
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  opportunityId             String
  Opportunity               Opportunity                 @relation(fields: [opportunityId], references: [opportunityId])
  VolunteerOpportunityMatch VolunteerOpportunityMatch[]
}

model Organisation {
  organisationId             String                       @id
  name                       String                       @db.VarChar(255)
  description                String
  postcode                   String                       @db.VarChar(8)
  email                      String                       @unique @db.VarChar(255)
  phone                      String                       @db.VarChar(20)
  website                    String                       @db.VarChar(255)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  organisationTypeId         String
  parentOrganisationId       String?
  state                      RecordState                  @default(ACTIVE)
  ApiKey                     ApiKey[]
  Opportunity                Opportunity[]
  OrganisationType           OrganisationType             @relation(fields: [organisationTypeId], references: [organisationTypeId])
  Organisation               Organisation?                @relation("OrganisationToOrganisation", fields: [parentOrganisationId], references: [organisationId])
  other_Organisation         Organisation[]               @relation("OrganisationToOrganisation")
  OrganisationVolunteer      OrganisationVolunteer[]
  User                       User[]
  UserOrganisationRole       UserOrganisationRole[]
  VolunteerSavedOrganisation VolunteerSavedOrganisation[]
}

model OrganisationType {
  organisationTypeId   String         @id
  organisationTypeName String         @db.VarChar(100)
  state                RecordState    @default(ACTIVE)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime
  Organisation         Organisation[]
}

model OrganisationVolunteer {
  organisationVolunteerId String       @id
  role                    String       @db.VarChar(100)
  state                   RecordState  @default(ACTIVE)
  createdAt               DateTime     @default(now())
  updatedAt               DateTime
  organisationId          String
  volunteerId             String
  Organisation            Organisation @relation(fields: [organisationId], references: [organisationId])
}

model PreferenceType {
  preferenceTypeId   String      @id
  preferenceTypeName String      @unique @db.VarChar(100)
  state              RecordState @default(ACTIVE)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime
  Volunteer          Volunteer[]
}

model Role {
  roleId      String       @id
  roleName    String       @db.VarChar(100)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  permissions Permission[]
  User        User[]
}

model Skill {
  skillId     String        @id
  skillName   String        @unique @db.VarChar(100)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Opportunity Opportunity[]
  Volunteer   Volunteer[]
}

model User {
  userId               String                 @id
  email                String                 @unique @db.VarChar(255)
  name                 String?                @db.VarChar(255)
  password             String?                @db.VarChar(255)
  phone                String?                @db.VarChar(20)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  organisationId       String?
  Organisation         Organisation?          @relation(fields: [organisationId], references: [organisationId])
  UserOrganisationRole UserOrganisationRole[]
  Volunteer            Volunteer?
  Role                 Role[]
}

model UserOrganisationRole {
  userOrganisationRoleId String       @id
  role                   String       @db.VarChar(100)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime
  userId                 String
  organisationId         String
  Organisation           Organisation @relation(fields: [organisationId], references: [organisationId])
  User                   User         @relation(fields: [userId], references: [userId])
}

model Volunteer {
  volunteerId                String                      @id
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  userId                     String                      @unique
  User                       User                        @relation(fields: [userId], references: [userId])
  VolunteerAvailability      VolunteerAvailability[]
  VolunteerLocation          VolunteerLocation?
  VolunteerOpportunityMatch  VolunteerOpportunityMatch[]
  VolunteerSavedOpportunity  VolunteerSavedOpportunity?
  VolunteerSavedOrganisation VolunteerSavedOrganisation?
  Cause                      Cause[]
  PreferenceType             PreferenceType[]
  Skill                      Skill[]
}

model VolunteerAvailability {
  volunteerAvailabilityId String           @id
  effectiveFrom           DateTime
  effectiveTo             DateTime
  createdAt               DateTime         @default(now())
  updatedAt               DateTime
  availabilityTypeId      String
  volunteerId             String
  AvailabilityType        AvailabilityType @relation(fields: [availabilityTypeId], references: [availabilityTypeId])
  Volunteer               Volunteer        @relation(fields: [volunteerId], references: [volunteerId])
}

model VolunteerLocation {
  volunteerLocationId String    @id
  state               String    @db.VarChar(20)
  postcode            String    @db.VarChar(8)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime
  volunteerId         String    @unique
  Volunteer           Volunteer @relation(fields: [volunteerId], references: [volunteerId])
}

model VolunteerOpportunityMatch {
  volunteerOpportunityMatchId String                     @id
  status                      VolunteerOpportunityStatus @default(WITHDRAWN)
  acceptedAt                  DateTime?
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime
  volunteerId                 String
  opportunityInstanceId       String
  OpportunityInstance         OpportunityInstance        @relation(fields: [opportunityInstanceId], references: [opportunityInstanceId])
  Volunteer                   Volunteer                  @relation(fields: [volunteerId], references: [volunteerId])
}

model VolunteerSavedOpportunity {
  volunteerSavedOpportunityId String      @id
  savedAt                     DateTime    @default(now())
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime
  volunteerId                 String      @unique
  opportunityId               String
  Opportunity                 Opportunity @relation(fields: [opportunityId], references: [opportunityId])
  Volunteer                   Volunteer   @relation(fields: [volunteerId], references: [volunteerId])
}

model VolunteerSavedOrganisation {
  volunteerSavedOrganisationId String       @id
  savedAt                      DateTime     @default(now())
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime
  volunteerId                  String       @unique
  organisationId               String
  Organisation                 Organisation @relation(fields: [organisationId], references: [organisationId])
  Volunteer                    Volunteer    @relation(fields: [volunteerId], references: [volunteerId])
}

enum OpportunityCommitment {
  FLEXIBLE
  REGULAR
}

enum OpportunityType {
  REMOTE
  IN_PERSON
}

enum Permission {
  availability_type_read
  availability_type_edit
  availability_type_create
  availability_type_delete
  availability_type_admin
  cause_read
  cause_edit
  cause_create
  cause_delete
  cause_admin
  opportunity_read
  opportunity_edit
  opportunity_create
  opportunity_delete
  opportunity_admin
  opportunity_instance_read
  opportunity_instance_edit
  opportunity_instance_create
  opportunity_instance_delete
  opportunity_instance_admin
  organisation_read
  organisation_edit
  organisation_create
  organisation_delete
  organisation_admin
  organisation_type_read
  organisation_type_edit
  organisation_type_create
  organisation_type_delete
  organisation_type_admin
  organisation_volunteer_read
  organisation_volunteer_edit
  organisation_volunteer_create
  organisation_volunteer_delete
  organisation_volunteer_admin
  preference_type_read
  preference_type_edit
  preference_type_create
  preference_type_delete
  preference_type_admin
  role_read
  role_edit
  role_create
  role_assign
  role_delete
  role_admin
  permission_read
  permission_edit
  permission_create
  permission_delete
  permission_admin
  skill_read
  skill_edit
  skill_create
  skill_delete
  skill_admin
  user_read
  user_edit
  user_create
  user_delete
  user_admin
  user_organisation_role_read
  user_organisation_role_edit
  user_organisation_role_create
  user_organisation_role_delete
  user_organisation_role_admin
  volunteer_read
  volunteer_edit
  volunteer_create
  volunteer_delete
  volunteer_admin
  volunteer_availability_read
  volunteer_availability_edit
  volunteer_availability_create
  volunteer_availability_delete
  volunteer_availability_admin
  volunteer_location_read
  volunteer_location_edit
  volunteer_location_create
  volunteer_location_delete
  volunteer_location_admin
  volunteer_opportunity_match_read
  volunteer_opportunity_match_edit
  volunteer_opportunity_match_create
  volunteer_opportunity_match_delete
  volunteer_opportunity_match_admin
  volunteer_saved_opportunity_read
  volunteer_saved_opportunity_edit
  volunteer_saved_opportunity_create
  volunteer_saved_opportunity_delete
  volunteer_saved_opportunity_admin
  volunteer_saved_organisation_read
  volunteer_saved_organisation_edit
  volunteer_saved_organisation_create
  volunteer_saved_organisation_delete
  volunteer_saved_organisation_admin
  api_keys_read
  api_keys_edit
  api_keys_delete
  api_keys_admin
  organisation_api_keys_admin
}

enum RecordState {
  ACTIVE
  INACTIVE
}

enum VolunteerOpportunityStatus {
  ACCEPTED
  WITHDRAWN
}
